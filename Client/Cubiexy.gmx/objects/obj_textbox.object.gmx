<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_textbox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

//Text
text        = "";
placeholder = "";
hash        = false;
max_letters = 25;

//Input
typing   = false;
hovering = false;

//Draw
draw_max_letters = 12;
image_speed = 0;

//Control
type      = TEXTBOX.NULL;

//Load text
text_loaded = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control

//Load text
if (!text_loaded)
{
    text = ini_load("settings.ini", "textboxes_data", string_replace_all(string_lower(placeholder), " ", "") + "_text");
    
    if (hash)
        text = string_decode(text);
        
    text_loaded = true;
}

//Hovering animation
hovering = position_meeting(mouse_x, mouse_y, self); 
if (hovering) image_index = 1; else image_index = 0;

//Typing
if (typing) 
{
    //Set the text and avoid # breaking
    text = string_copy(keyboard_string, 1, max_letters);
    text = string_replace_all(text, "#", "");
    text = string_upper(text);
    
    //Save text
    var _text = text;
    if (hash) _text = string_encode(text);
    
    ini_save("settings.ini", "textboxes_data", string_replace_all(string_lower(placeholder), " ", "") + "_text", _text);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start typing

//Check for pause
if (!instance_exists(par_pause)) 
{
    //Set typing
    typing = position_meeting(mouse_x, mouse_y, self);
    
    //Set keyboard string to nothing
    if (!typing)
        keyboard_string = "";
    
    //Play sound
    if (typing)
        audio_play_sound(snd_button_click, 10, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
draw_sprite_shadow(3);
draw_self();

//Draw settings
draw_set(-1, 1, fnt_textbox);
align_set(fa_center, fa_center);

//Draw the text
if (text == "") 
{
    //Draw the placeholder
    draw_set(-1, 0.70, -1);
    draw_string(x, y, placeholder, c_white, c_black);
    draw_reset();
} 
else
{
    //Text variables
    var _text_to_draw = "",
        _text_length  = string_length(text);

    //Draw the text
    if (hash) 
        _text_to_draw = string_copy(string_repeat("*", _text_length), _text_length - draw_max_letters, _text_length);
    else 
        _text_to_draw = string_copy(text, _text_length - draw_max_letters, _text_length);
    
    //Draw the text
    draw_string(x, y, _text_to_draw, c_white, c_black);
}

//Reset draw settings
draw_reset();
align_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
